from __future__ import annotations
from datetime import datetime
from marshmallow import Schema, fields, post_load
from ..utils import uuid


def generate_task_id(name: str) -> str:
    if '.' in name:
        dot = name.rfind('.')
        name = name[dot+1:]

    return '%s-%s' % (name.lower(), uuid())


class TaskDefinition(object):
    """
    Defines a Task :)

    Attributes:
        name (str): Task import name.
        image (str): Task image.
        id (str): Task id. If None, an id will be autogenerated.
        upstream (str): Upstream connection string. Defaults to None.
        config (dict): Configuration values
        inputs (dict): Input values
        meta (dict): Freeform metadata
        env (dict): Environment variables
        ports (dict): Port forwards
    """

    def __init__(
        self,
        name:      str,
        image:     str,
        id:        str = None,
        upstream:  str = None,
        parent:    str = None,
        config:    dict = {},
        inputs:    dict = {},
        meta:      dict = {},
        env:       dict = {},
        ports:     dict = {},
        routes:    dict = {},
        cpu:       str = '0',
        memory:    str = '0',
        owner:     str = '',
        created_at: datetime = None,
    ):
        """
        Arguments:
            name (str): Task import name.
            image (str): Task image.
            id (str): Task id. If None, an id will be autogenerated.
            upstream (str): Upstream connection string. Defaults to None.
            config (dict): Configuration values
            inputs (dict): Input values
            meta (dict): Freeform metadata
            env (dict): Environment variables
            ports (dict): Port forwards
            routes (dict)
            cpu (str)
            memory (str)
            owner (str)
            created_at (DateTime)
        """
        self.id = generate_task_id(name) if not id else id
        self.name = name
        self.image = image
        self.parent = parent
        self.upstream = upstream
        self.config = config
        self.inputs = inputs
        self.meta = meta
        self.env = env
        self.ports = ports
        self.routes = routes
        self.cpu = cpu
        self.memory = memory
        self.owner = owner
        self.created_at = datetime.now() if created_at is None else created_at

    def serialize(self) -> dict:
        """ Serialize task definition to a dict """
        return TaskDefinitionSchema().dump(self)

    @staticmethod
    def deserialize(taskdef: dict) -> TaskDefinition:
        """ Deserialize task definition from a dict """
        return TaskDefinitionSchema().load(taskdef)


class TaskDefinitionSchema(Schema):
    """ TaskDefinition serialization schema. """

    id = fields.Str(required=True)
    name = fields.Str(required=True)
    image = fields.Str(required=True)
    upstream = fields.Str(allow_none=True)
    parent = fields.Str(allow_none=True)
    config = fields.Dict(missing={})
    inputs = fields.Dict(missing={})
    meta = fields.Dict(missing={})
    env = fields.Dict(missing={})
    ports = fields.Dict(missing={})
    routes = fields.Dict(missing={})
    cpu = fields.Str(missing='0')
    memory = fields.Str(missing='0')
    owner = fields.String(missing='')
    created_at = fields.DateTime('iso')

    @post_load
    def make_taskdef(self, data: dict, **kwargs) -> TaskDefinition:
        return TaskDefinition(**data)
