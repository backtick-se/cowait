#!/usr/bin/env python
import json
import click
import pipeline.cli


def option_val(val):
    try:
        return json.loads(val)
    except json.JSONDecodeError:
        return val


def option_dict(opts):
    options = {}
    for [key, val] in opts:
        options[key] = option_val(val)
    return options


@click.command(help='run a task')
@click.argument('task')
@click.option('--provider',
              default='docker',
              type=str,
              help='cluster provider type')
@click.option('--input',
              type=(str, str),
              multiple=True,
              help='specify task input')
@click.option('--config',
              type=(str, str),
              multiple=True,
              help='specify task config')
@click.option('--env',
              type=(str, str),
              multiple=True,
              help='define enviornment variable')
@click.option('--upstream',
              type=str,
              help='root task upstream uri')
@click.option('--build',
              type=bool, is_flag=True,
              help='build and push first',
              default=False)
@click.option('--detach',
              type=bool, is_flag=True,
              help='run in detached mode',
              default=False)
def run(
    task: str, provider: str,
    input, config, env,
    upstream: str, build: bool, detach: bool
):
    pipeline.cli.run(
        task,
        provider=provider,
        inputs=option_dict(input),
        config=option_dict(config),
        env=option_dict(env),
        upstream=upstream,
        build=build,
        detach=detach,
    )


@click.command(help='build a task')
@click.argument('task')
def build(task: str):
    pipeline.cli.build(task)


@click.command(help='push a task to the registry')
@click.argument('task')
def push(task: str):
    pipeline.cli.push(task)


@click.command(help='destroy tasks')
@click.option('--provider',
              default='docker',
              type=str,
              help='cluster provider type')
def destroy(provider):
    pipeline.cli.destroy(provider)


@click.command(help='list tasks')
@click.option('--provider',
              default='docker',
              type=str,
              help='cluster provider type')
def ps(provider):
    pipeline.cli.list_tasks(provider)


@click.command(help='deploy pipeline agent')
@click.option('--provider',
              default='docker',
              type=str,
              help='cluster provider type')
def agent(provider: str):
    pipeline.cli.agent(provider)


if __name__ == '__main__':
    @click.group()
    def cli():
        pass

    cli.add_command(run)
    cli.add_command(build)
    cli.add_command(push)
    cli.add_command(destroy)
    cli.add_command(ps)
    cli.add_command(agent)

    cli()
